DROP TABLE Likes, Matches, projects, project_images, roles, userProjectRoles, users;

CREATE TABLE users ( 
    ID INT NOT NULL AUTO_INCREMENT, 
    Username VARCHAR(255) NOT NULL, 
    Email VARCHAR(255) NOT NULL, 
    Password VARCHAR(255) NOT NULL, 
    userType ENUM('Project Seeker', 'Project Owner', 'Mentor/Advisor') NOT NULL,
    resumePath VARCHAR(255), -- Path to the uploaded resume
    bio TEXT,
    PRIMARY KEY (ID) 
);

CREATE TABLE projects (
    projectID INT AUTO_INCREMENT PRIMARY KEY,
    projectName VARCHAR(255) NOT NULL,
    projectDescription TEXT,
    userID INT, -- User who owns/created the project
    startDate VARCHAR(255) NOT NULL,
    endDate VARCHAR(255) NOT NULL,
    fundGoal INT NOT NULL,  -- Required funding goal for the project
    fundAmount INT DEFAULT 0,  -- Current funding amount, starts at 0
    field VARCHAR(255), -- e.g., "Technology", "Health", etc.
    requiredSkills TEXT, -- List of skills needed for the project
    location VARCHAR(255), -- If relevant, e.g., "Remote" or "Onsite"
    status ENUM('Open', 'Closed') DEFAULT 'Open',
    FOREIGN KEY (userID) REFERENCES users(ID)
);

CREATE TABLE project_images (
    imageID INT NOT NULL AUTO_INCREMENT,
    projectID INT NOT NULL,  -- Foreign key for the project
    imageURL VARCHAR(255) NOT NULL,  -- URL or path to the image
    PRIMARY KEY (imageID),
    FOREIGN KEY (projectID) REFERENCES projects(projectID) ON DELETE CASCADE
);

CREATE TABLE investors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    userId INT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    description TEXT,
    expertise VARCHAR(255),
    investmentRange VARCHAR(255),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users(ID)
);

CREATE TABLE investor_images (
    id INT AUTO_INCREMENT PRIMARY KEY,
    investorId INT,
    imageURL VARCHAR(255),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (investorId) REFERENCES investors(id) ON DELETE CASCADE
);

CREATE TABLE Roles (
    roleId INT AUTO_INCREMENT PRIMARY KEY,
    roleName VARCHAR(255) NOT NULL, -- e.g., "Mentor", "Advisor", "Developer"
    description TEXT
);

CREATE TABLE UserProjectRoles (
    userProjectRoleId INT AUTO_INCREMENT PRIMARY KEY,
    userId INT,
    projectId INT,
    roleId INT,
    joinedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users(ID),
    FOREIGN KEY (projectId) REFERENCES projects(projectId),
    FOREIGN KEY (roleId) REFERENCES Roles(roleId)
);

CREATE TABLE Likes (
    likeId INT AUTO_INCREMENT PRIMARY KEY,
    userId INT,
    projectId INT,
    likedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users(ID),
    FOREIGN KEY (projectId) REFERENCES projects(projectId),
    UNIQUE (userId, projectId) -- Prevents duplicate likes from the same user to the same project
);

CREATE TABLE Matches (
    matchId INT AUTO_INCREMENT PRIMARY KEY,
    userId INT,
    projectId INT,
    matchedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users(ID),
    FOREIGN KEY (projectId) REFERENCES projects(projectId)
);
