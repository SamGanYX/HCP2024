DROP TABLE IF EXISTS Likes;
DROP TABLE IF EXISTS Matches;
DROP TABLE IF EXISTS applications;
DROP TABLE IF EXISTS collaborators;
DROP TABLE IF EXISTS user_skills;
DROP TABLE IF EXISTS user_swipes;
DROP TABLE IF EXISTS project_images;
DROP TABLE IF EXISTS UserProjectRoles;
DROP TABLE IF EXISTS projects;
DROP TABLE IF EXISTS Roles;
DROP TABLE IF EXISTS investor_images;
DROP TABLE IF EXISTS investors;
DROP TABLE IF EXISTS users;

CREATE TABLE users ( 
    ID INT NOT NULL AUTO_INCREMENT, 
    Username VARCHAR(255) NOT NULL, 
    FullName VARCHAR(255) NOT NULL,
    Email VARCHAR(255) NOT NULL, 
    Password VARCHAR(255) NOT NULL, 
    userType ENUM('Project Seeker', 'Project Owner', 'Mentor/Advisor') NOT NULL,
    resumePath VARCHAR(255), -- Path to the uploaded resume
    bio TEXT,
    tags TEXT,
    PRIMARY KEY (ID) 
);

CREATE TABLE projects (
    projectID INT AUTO_INCREMENT PRIMARY KEY,
    projectName VARCHAR(255) NOT NULL,
    projectDescription TEXT,
    userID INT, -- User who owns/created the project
    startDate VARCHAR(255) NOT NULL,
    endDate VARCHAR(255) NOT NULL,
    fundGoal INT NOT NULL,  -- Required funding goal for the project
    fundAmount INT DEFAULT 0,  -- Current funding amount, starts at 0
    field VARCHAR(255), -- e.g., "Technology", "Health", etc.
    requiredSkills TEXT, -- List of skills needed for the project
    location VARCHAR(255), -- If relevant, e.g., "Remote" or "Onsite"
    status ENUM('Open', 'Closed') DEFAULT 'Open',
    FOREIGN KEY (userID) REFERENCES users(ID)
);

CREATE TABLE project_images (
    imageID INT NOT NULL AUTO_INCREMENT,
    projectID INT NOT NULL,  -- Foreign key for the project
    imageURL VARCHAR(255) NOT NULL,  -- URL or path to the image
    PRIMARY KEY (imageID),
    FOREIGN KEY (projectID) REFERENCES projects(projectID) ON DELETE CASCADE
);

CREATE TABLE investors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    userId INT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    description TEXT,
    expertise VARCHAR(255),
    investmentRange VARCHAR(255),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users(ID)
);

CREATE TABLE investor_images (
    id INT AUTO_INCREMENT PRIMARY KEY,
    investorId INT,
    imageURL VARCHAR(255),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (investorId) REFERENCES investors(id) ON DELETE CASCADE
);

CREATE TABLE Roles (
    roleId INT AUTO_INCREMENT PRIMARY KEY,
    roleName VARCHAR(255) NOT NULL, -- e.g., "Mentor", "Advisor", "Developer"
    description TEXT
);

CREATE TABLE UserProjectRoles (
    userProjectRoleId INT AUTO_INCREMENT PRIMARY KEY,
    userId INT,
    projectId INT,
    roleId INT,
    joinedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users(ID),
    FOREIGN KEY (projectId) REFERENCES projects(projectId),
    FOREIGN KEY (roleId) REFERENCES Roles(roleId)
);

CREATE TABLE Likes (
    likeId INT AUTO_INCREMENT PRIMARY KEY,
    userId INT,
    projectId INT,
    likedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users(ID),
    FOREIGN KEY (projectId) REFERENCES projects(projectId),
    UNIQUE (userId, projectId) -- Prevents duplicate likes from the same user to the same project
);

CREATE TABLE Matches (
    matchId INT AUTO_INCREMENT PRIMARY KEY,
    userId INT,
    projectId INT,
    matchedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users(ID),
    FOREIGN KEY (projectId) REFERENCES projects(projectId)
);

CREATE TABLE applications (
    userID INT,
    projectID INT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (userID, projectID),  -- Composite primary key
    FOREIGN KEY (userID) REFERENCES users(ID),
    FOREIGN KEY (projectID) REFERENCES projects(projectID)
);

CREATE TABLE collaborators (
    collaboratorId INT AUTO_INCREMENT PRIMARY KEY,
    userId INT NOT NULL,
    projectId INT NOT NULL,
    joinedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users(ID) ON DELETE CASCADE,
    FOREIGN KEY (projectId) REFERENCES projects(projectID) ON DELETE CASCADE,
    UNIQUE (userId, projectId) -- Prevents duplicate collaborations
);

CREATE TABLE user_skills (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    skill VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(ID)
); 

ALTER TABLE investors
ADD Qualifications VARCHAR(255),
ADD Location VARCHAR(255),
ADD Certifications TEXT,
ADD Tags TEXT, -- Assuming Tags will be stored as a comma-separated list
ADD ContactInfo VARCHAR(255);

ALTER TABLE projects
ADD category VARCHAR(255);

CREATE TABLE user_swipes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    swiped_user_id INT NOT NULL,
    swipe_type ENUM('left', 'right', 'rose') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(ID),
    FOREIGN KEY (swiped_user_id) REFERENCES users(ID),
    UNIQUE KEY unique_swipe (user_id, swiped_user_id),
    matched JSON DEFAULT ('[]'),
    matched_at TIMESTAMP NULL,
    status ENUM('Pending', 'Accepted', 'Rejected') DEFAULT 'Pending'
);

ALTER TABLE users ADD photoPath VARCHAR(255);
